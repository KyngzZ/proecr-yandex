import pygame
import random
import math

# Инициализация Pygame
pygame.init()

# Настройки экрана
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Boss Fight")

# Цвета
WHITE = (255, 255, 255)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)

# Класс игрока
class Player(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.Surface((30, 30))
        self.image.fill(BLUE)
        self.rect = self.image.get_rect(center=(x, y))
        self.speed = 5
        self.health = 100

    def update(self, keys):
        if keys[pygame.K_LEFT] and self.rect.x > 0:
            self.rect.x -= self.speed
        if keys[pygame.K_RIGHT] and self.rect.x < WIDTH - self.rect.width:
            self.rect.x += self.speed
        if keys[pygame.K_UP] and self.rect.y > 0:
            self.rect.y -= self.speed
        if keys[pygame.K_DOWN] and self.rect.y < HEIGHT - self.rect.height:
            self.rect.y += self.speed

# Класс пули босса
class BossBullet(pygame.sprite.Sprite):
    def __init__(self, x, y, angle, speed):
        super().__init__()
        self.image = pygame.Surface((10, 10))
        self.image.fill(RED)
        self.rect = self.image.get_rect(center=(x, y))
        self.angle = math.radians(angle)
        self.speed = speed

    def update(self):
        self.rect.x += self.speed * math.cos(self.angle)
        self.rect.y += self.speed * math.sin(self.angle)
        if self.rect.x < 0 or self.rect.x > WIDTH or self.rect.y < 0 or self.rect.y > HEIGHT:
            self.kill()

# Класс пули-преследователя
class TrackingBullet(pygame.sprite.Sprite):
    def __init__(self, x, y, target):
        super().__init__()
        self.image = pygame.Surface((15, 15))
        self.image.fill(YELLOW)
        self.rect = self.image.get_rect(center=(x, y))
        self.target = target
        self.speed = 3

    def update(self):
        dx = self.target.rect.x - self.rect.x
        dy = self.target.rect.y - self.rect.y
        dist = math.hypot(dx, dy)
        if dist != 0:
            dx /= dist
            dy /= dist
        self.rect.x += dx * self.speed
        self.rect.y += dy * self.speed
        if dist < 5:
            self.kill()

# Класс второго босса
class Boss2(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface((80, 80))
        self.image.fill(RED)
        self.rect = self.image.get_rect(center=(WIDTH//2, 100))
        self.speed = 2
        self.health = 500
        self.shoot_timer = 0
        self.charge_timer = 0
        self.target = None
        self.state = "moving"  # Состояния: moving, shooting, charging

    def update(self, players):
        if self.target is None and players:
            self.target = random.choice(players)

        if self.state == "moving":
            self.move_towards_player()
            self.shoot_timer += 1
            if self.shoot_timer > 300:  # Каждые 5 секунд
                self.shoot_timer = 0
                self.state = "shooting"

        elif self.state == "shooting":
            self.shoot_wave()
            self.charge_timer = 0
            self.state = "charging"

        elif self.state == "charging":
            self.charge_timer += 1
            if self.charge_timer > 120:  # Заряжается 2 секунды
                self.shoot_big_bullet()
                self.state = "moving"

    def move_towards_player(self):
        if self.target:
            dx = self.target.rect.x - self.rect.x
            dy = self.target.rect.y - self.rect.y
            dist = math.hypot(dx, dy)
            if dist != 0:
                dx /= dist
                dy /= dist
            self.rect.x += dx * self.speed
            self.rect.y += dy * self.speed

    def shoot_wave(self):
        for angle in range(0, 360, 30):  # Стреляет кругом
            bullet = BossBullet(self.rect.centerx, self.rect.centery, angle, 5)
            boss_bullets.add(bullet)

    def shoot_big_bullet(self):
        tracking_bullet = TrackingBullet(self.rect.centerx, self.rect.centery, self.target)
        boss_bullets.add(tracking_bullet)

# Группы спрайтов
all_sprites = pygame.sprite.Group()
players = pygame.sprite.Group()
boss_bullets = pygame.sprite.Group()
boss = None
wave = 1

# Создание игроков
player1 = Player(100, HEIGHT - 50)
player2 = Player(WIDTH - 100, HEIGHT - 50)
players.add(player1, player2)
all_sprites.add(player1, player2)

# Игровой цикл
running = True
clock = pygame.time.Clock()

while running:
    clock.tick(60)
    screen.fill(WHITE)
    keys = pygame.key.get_pressed()

    # Обновление спрайтов
    all_sprites.update(keys)
    boss_bullets.update()

    # Спавн босса на 10 волне
    if wave == 10 and boss is None:
        boss = Boss2()
        all_sprites.add(boss)

    # Проверка столкновения пуль с игроками
    for bullet in boss_bullets:
        for player in players:
            if bullet.rect.colliderect(player.rect):
                player.health -= 10  # Урон от пуль
                bullet.kill()

    # Удаление босса при 0 HP
    if boss and boss.health <= 0:
        boss.kill()
        boss = None
        wave += 1

    # Отрисовка
    all_sprites.draw(screen)
    boss_bullets.draw(screen)
    pygame.display.flip()

    # Обработка событий
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

pygame.quit()
