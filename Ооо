import pygame
import random
import math

pygame.init()

WIDTH, HEIGHT = 1280, 720
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Кооперативная арена")
clock = pygame.time.Clock()

font = pygame.font.Font(None, 74)
button_font = pygame.font.Font(None, 36)

# ======== КЛАССЫ ========= #

class Block(pygame.sprite.Sprite):
    def __init__(self, x, y, width, height):
        super().__init__()
        self.image = pygame.Surface((width, height))
        self.image.fill((128, 128, 128))
        self.rect = self.image.get_rect(topleft=(x, y))

class Portal(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.Surface((50, 50))
        self.image.fill((0, 255, 255))
        self.rect = self.image.get_rect(center=(x, y))

class Player(pygame.sprite.Sprite):
    def __init__(self, color, controls):
        super().__init__()
        self.image = pygame.Surface((50, 50))
        self.image.fill(color)
        self.rect = self.image.get_rect(center=(WIDTH // 2, HEIGHT - 60))
        self.health = 100
        self.controls = controls
        self.alive = True

    def update(self):
        if not self.alive:
            return
        keys = pygame.key.get_pressed()
        dx, dy = 0, 0
        if keys[self.controls['UP']]: dy = -5
        if keys[self.controls['DOWN']]: dy = 5
        if keys[self.controls['LEFT']]: dx = -5
        if keys[self.controls['RIGHT']]: dx = 5

        self.rect.x += dx
        self.rect.y += dy

    def shoot(self):
        if self.alive:
            projectile = Projectile(self.rect.centerx, self.rect.top)
            all_sprites.add(projectile)
            projectiles.add(projectile)

    def draw_health(self):
        if self.health > 0:
            pygame.draw.rect(screen, (255, 0, 0), (self.rect.x, self.rect.y - 10, 50, 5))
            pygame.draw.rect(screen, (0, 255, 0), (self.rect.x, self.rect.y - 10, 50 * (self.health / 100), 5))

    def take_damage(self, amount):
        self.health -= amount
        if self.health <= 0:
            self.alive = False

class Enemy(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface((40, 40))
        self.image.fill((255, 0, 0))
        self.rect = self.image.get_rect(x=random.randint(0, WIDTH - 40), y=random.randint(-100, 0))
        self.health = 50
        self.speed = 2

    def update(self):
        if player1.alive and player2.alive:
            target = player1 if random.random() < 0.5 else player2
        elif player1.alive:
            target = player1
        elif player2.alive:
            target = player2
        else:
            return

        dx = target.rect.centerx - self.rect.centerx
        dy = target.rect.centery - self.rect.centery
        distance = math.sqrt(dx ** 2 + dy ** 2)

        if distance > 0:
            self.rect.x += (dx / distance) * self.speed
            self.rect.y += (dy / distance) * self.speed

class Boss(Enemy):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface((100, 100))
        self.image.fill((255, 128, 0))
        self.health = 500
        self.attack_phase = 0
        self.last_attack_time = pygame.time.get_ticks()

    def draw_health(self):
        pygame.draw.rect(screen, (255, 0, 0), (WIDTH // 2 - 150, 20, 300, 20))
        pygame.draw.rect(screen, (0, 255, 0), (WIDTH // 2 - 150, 20, 300 * (self.health / 500), 20))

    def update(self):
        current_time = pygame.time.get_ticks()
        if current_time - self.last_attack_time > 10000:
            self.attack_phase = (self.attack_phase + 1) % 3
            self.last_attack_time = current_time

        if self.attack_phase == 0:
            self.shoot_multiple()
        elif self.attack_phase == 1:
            self.shoot_heavy()
        elif self.attack_phase == 2:
            self.shoot_wave()

    def shoot_multiple(self):
        for i in range(-1, 2):
            projectile = BossProjectile(self.rect.centerx + i * 20, self.rect.bottom, 5, 10, 7)
            all_sprites.add(projectile)
            boss_projectiles.add(projectile)

    def shoot_heavy(self):
        for i in range(-1, 2, 2):
            projectile = BossProjectile(self.rect.centerx + i * 30, self.rect.bottom, 15, 30, 3, (255, 50, 50))
            all_sprites.add(projectile)
            boss_projectiles.add(projectile)

    def shoot_wave(self):
        angles = [-45, -30, -15, 0, 15, 30, 45]
        for angle in angles:
            projectile = BossWaveProjectile(self.rect.centerx, self.rect.bottom, angle)
            all_sprites.add(projectile)
            boss_projectiles.add(projectile)

# ======== ГЛАВНЫЙ ИГРОВОЙ ЦИКЛ ========= #

def main():
    global all_sprites, projectiles, blocks, player1, player2, portal, boss

    wave = 1
    portal = None
    boss = None

    all_sprites = pygame.sprite.Group()
    projectiles = pygame.sprite.Group()
    boss_projectiles = pygame.sprite.Group()
    
    player1 = Player((0, 255, 0), {'UP': pygame.K_w, 'DOWN': pygame.K_s, 'LEFT': pygame.K_a, 'RIGHT': pygame.K_d, 'SHOOT': pygame.K_SPACE})
    player2 = Player((0, 0, 255), {'UP': pygame.K_UP, 'DOWN': pygame.K_DOWN, 'LEFT': pygame.K_LEFT, 'RIGHT': pygame.K_RIGHT, 'SHOOT': pygame.K_RETURN})
    
    all_sprites.add(player1, player2)

    enemies = pygame.sprite.Group()
    for _ in range(5):
        enemy = Enemy()
        all_sprites.add(enemy)
        enemies.add(enemy)

    running = True
    while running:
        screen.fill((0, 0, 0))

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        all_sprites.update()
        all_sprites.draw(screen)

        if boss:
            boss.draw_health()

        pygame.display.flip()
        clock.tick(60)

    pygame.quit()

if __name__ == "__main__":
    main()
